@{
    ViewBag.Title = "Time Series";
}

<style type="text/css">
    .axis path, .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }
    .line {
        fill: none;
        stroke: steelblue;
        stroke-width: 1px;
    }
</style>

<h2>Time Series</h2>
<div class="row">
    <div class="span6">
        <div id="chart_controls">
            <select id="chart_type">
                <option value="TotalUsage">Total Usage</option>
                <option value="Ticks">Ticks</option>
                <option value="Starts">Starts</option>
                <option value="AverageDuration">Average Duration</option>
            </select>
        </div>
    </div>
    <div class="span6">
        <form action="@Url.Action("Generate")" method="POST">
            <input type="submit" value="Generate"/>
        </form>
    </div>
</div>
<div class="row">
    <div class="span12">
        <div id="chart"></div>
    </div>
</div>



@section scripts {
    <script type="text/javascript">
        $("ul.nav li.time-series").addClass("active");
        $("select#chart_type").val('@ViewBag.Accessor');
        $("select#chart_type").change(function () {
            document.location.href = '/TimeSeries?accessor=' + $(this).val();
        });
        var margin = { top: 20, right: 80, bottom: 30, left: 50 },
            width = 960 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom,
            padding = 30,
            x = d3.time.scale().range([0, width]),
            y = d3.scale.linear().range([height, 0]),
            dateKey = function(d) {
                return +d.Year * 10000 + (+d.Month - 1) * 100 + +d.Day;
            },
            color = d3.scale.category10(),
            xAxisFormat = d3.time.format("%Y-%m-%d"),
            xAxis = d3.svg.axis().scale(x).orient("bottom").ticks(8).tickFormat(xAxisFormat),
            yAxis = d3.svg.axis().scale(y).orient("left").ticks(10);
        var line = d3.svg.line()
            .interpolate("basis")
            .x(function(d) { return x(d.Date); })
            .y(function(d) { return y(d.@(ViewBag.Accessor)); });
        var svg = d3.select("#chart").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        var displayChart = function(dataset) {
            dataset.forEach(function(d) {
                d.Date = new Date(d.Year, d.Month - 1, d.Day);
                d.TotalUsage = d.Starts + d.Ticks;
                d.Key = dateKey(d);
            });
            var data = d3.nest()
                .key(function(d) { return d.Feature; })
                .entries(dataset);
            color.domain(data.map(function(d) { return d.key; }));
            x.domain(d3.extent(dataset, function(d) { return d.Date; }));
            y.domain(d3.extent(dataset, function(d) { return d.@(ViewBag.Accessor); }));
            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis);
            svg.append("g")
                .attr("class", "y axis")
                .call(yAxis)
                .append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", "0.71em")
                .style("text-anchor", "end")
                .text("@ViewBag.Accessor");
            var feature = svg.selectAll(".feature")
                .data(data)
                .enter().append("g")
                .attr("class", "feature");
            feature.append("path")
                .attr("class", "line")
                .attr("d", function(d) { return line(d.values); })
                .style("stroke", function(d) {
                    return color(d.key);
                });
            feature.append("text")
                .datum(function(d) { return { name: d.key, value: d.values[d.values.length - 1] }; })
                .attr("transform", function(d) { return "translate(" + x(d.value.Date) + "," + y(d.value.@(ViewBag.Accessor)) + ")"; })
                .attr("x", 3)
                .attr("dy", ".35em")
                .text(function(d) { return d.value.Feature; });
        };
        d3.json('/api/ChartData', displayChart);
    </script>
}